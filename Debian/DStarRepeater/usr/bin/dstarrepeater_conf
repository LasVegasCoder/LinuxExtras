#!/bin/bash
#
# Configure script for G4KLX DStarRepeater
#
# Copyright (C) 2014   Hans-J. Barthen, DL5DI (dl5di@gmx.de)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# 2014-02-16 dl5di    initial version for CentOS
# 2014-02-18 dl5di    Debian version
# 2014-02-20 dl5di    minor fixes, wrong function name for controller_name
# 2014-02-23 dl5di    fix config-path
# 2014-02-25 dl5di    some bugfixes in initial setup
# 2014-03-15 dl5di    fix DVAP PTT controller setup
# 2014-04-23 dl5di	  fix DVMEGA type setting
#
# Todo / known issues:
# 2014-02-20 dl5di    minor fixes, RaspberryPi I/O port support added
#
rev="Debian 20140423"

if [ $UID -ne 0 ]; then
	echo
	echo "ERROR:  This script must be run as the root user!"
	echo "        Please use 'su' or log in as root and try again."
	echo
	exit 1
fi
#
# usage:
# 	./dstarrepeater_conf <module>
# example:
# 	./dstarrepeater_conf 1
#
# Startparameter:
# 1: dstarrepeater module 1-4
#
# dstarrepeater_conf is usually called out of ircddbgw_conf
#
#----------------------------------------------------------------------------

function write_value(){

#
# 3 parameters: filename parametername value
# sample call: write_value /etc/ircddbgateway $var $gwcall
# returns: 0=error, 1=ok, 2=no change
#

	RETVAL=0

	if [ $# != 3 ]; then
		echo "    not enough params $#" >> $LOG
		return $RETVAL
	fi

	echo " - ($3) -> $1($2)" >> $LOG

	if [ ! -f "$1" ]; then
		echo "   $1 does not exist" >> $LOG
		return $RETVAL
	fi

	if grep -q "^[[:space:]]*${2}[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*" "$1"; then
		if grep -q "^[[:space:]]*${2}[[:space:]]*=[[:space:]]*${3}[[:space:]]*$" "$1"; then
			echo "   $1 already has ${2} set to ${3}, no change" >> $LOG
			RETVAL=2
		else
			 echo -e ",s|^[[:space:]]*${2}[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*|${2}=${3}|\nwq" | ed -s "$1"
			 echo "   setting ${2}=${3} in file ${1}" >> $LOG
			RETVAL=1
		fi
	elif grep -q "^[[:space:]]*${2}[[:space:]]*=$" "$1"; then
		echo "   setting ${2}=${3} to file $1" >> $LOG
		echo -e ",s|^[[:space:]]*${2}=$|${2}=${3}|\nwq" | ed -s "$1"
		RETVAL=1
	else
		echo "   adding ${2}=${3} to file $1" >> $LOG
		echo "${2}=${3}" >> "$1"
		RETVAL=1
	fi

	echo ""
	if [ $RETVAL -gt 0 ]; then
		echo "OK (${3})"
	else
		echo "ERROR (${3}) "
	fi
	echo ""
	return $RETVAL
}

#----------------------------------------------------------------------------

function read_default(){
#
# read default value from /home/opendv/dstarrepeater/dstarrepeater.default
# parameter: parametername
# returns 0=error 1=OK 2=no defaultvalue
# value in globale variable 'DEFAULT'
#
	RETVAL=0
	unset DEFAULT
    
	if [ $# != 1 ]; then
		return $RETVAL
	fi

	echo " - $DEFVALUES $1" >> $LOG

	if [ ! -f $DEFVALUES ]; then
		echo "   $DEFVALUES does not exists" >> $LOG
		return $RETVAL
	fi

	if ! grep -q "^[[:space:]]*${1}[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*" "$DEFVALUES"; then
		if grep -q "^[[:space:]]*${1}[[:space:]]*=" "$DEFVALUES"; then
			echo "   property $1 from $DEFVALUES has empty value" >> $LOG
			DEFAULT=""
			RETVAL=2
		else
			echo "   $DEFVALUES does not contain $1 property" >> $LOG
		fi
		return $RETVAL
	 fi

	DEFAULT=` gawk '
	/^[[:space:]]*'"$1"'[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*/ {
		match( $0, "^[[:space:]]*'"$1"'[[:space:]]*=[[:space:]]*([[:graph:]][[:print:]]*)", a)
		print a[1]
		exit
	} ' < "$DEFVALUES" `

	if [ "x$DEFAULT" = "x" ]; then
		echo "   could not read property $1 from file $DEFVALUES" >> $LOG
		DEFAULT=""
		return 2
	fi
	echo "   default is: $DEFAULT" >> $LOG

	return 1
}

#----------------------------------------------------------------------------

function read_value(){
#
# read value from file
# 2 parameter1: filenamename parametername
# returns 0=error 1=OK
# value in globale variable 'VALUE'
#
	RETVAL=0
	unset INPUT
    
	if [ $# != 2 ]; then
		return $RETVAL
	fi

	echo " - $1($2)" >> $LOG

	if [ ! -f "$1" ]; then
		echo "   $1 does not exists" >> $LOG
		return $RETVAL
	fi

	if ! grep -q "^[[:space:]]*${2}[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*" "$1"; then
		echo "   $1 does not contain $2 property" >> $LOG
		return $RETVAL
	fi

	VALUE=` gawk '
	/^[[:space:]]*'"$2"'[[:space:]]*=[[:space:]]*[[:graph:]][[:print:]]*/ {
		match( $0, "^[[:space:]]*'"$2"'[[:space:]]*=[[:space:]]*([[:graph:]][[:print:]]*)", a)
		print a[1]
		exit
	} ' < "$1" `

	if [ "x$VALUE" = "x" ]; then
		echo "   could not read property $2 from file $1" >> $LOG
		return $RETVAL
	fi
	return 1
}

#----------------------------------------------------------------------------

function request_input(){
#
# request input string from user
# 4-5 parameters: prompt minlength maxlength require [default]
# returns answer in global variable INPUT
# require: 0=no/1=yes/2=yes but reset allowed
# returns 0=error, 1=ok, 2= oldvalue, 3=reset 
#
	RETVAL=0
	unset INPUT
    
	if [ $# != 4 -a $# != 5 ]; then
		return $RETVAL
	fi

	echo " - input request $1 $2 $3 $4 $5" >> $LOG

	while [ ${#INPUT} -lt $2 ]; do
		if [ "$4" = 0 -o "$4" = 2 ]; then
			print_text "reset_allowed"
		fi
		read -r -e -n $3 -p "$1 [$5] > " INPUT
		RETVAL=1
		if [ -z "$INPUT" ]; then
			RETVAL=2
			INPUT=$5
			if [ -z "$INPUT" -a  "$4" -eq 0 ]; then
				break
			fi	
		fi
		if [ "$INPUT" == "-" ]; then
			if [ "$4" = 0 -o "$4" = 2 ]; then
				RETVAL=3
				break
			else
#			    print_text "request_input"
				INPUT=""
			fi
		fi
	  done
	  return $RETVAL
}

#----------------------------------------------------------------------------

function request_value(){
#
# request numeric value from user
# 4-5 parameters: prompt minvalue maxvalue require [default]
# returns answer in global variable INPUT
# require: 0=no/1=yes/2=yes but reset allowed
# returns 0=error, 1=ok, 2=oldvalue, 3=reset 
# returns value in global variable INPUT
#
	RETVAL=0
	let INPUT=$2-1
    
	if [ $# != 4 -a $# != 5 ]; then
		echo "ERROR request_value"
		echo "ERROR request_value number of parameters" >> $LOG
		return $RETVAL
	fi

	echo " - value request $1 $2 $3 $4 $5" >> $LOG

	while [[ "${INPUT}" -lt "$2" ]] || [[ "${INPUT}" -gt "$3" ]]; do
		if [ "$4" = 0 -o "$4" = 2 ]; then
			print_text "reset_allowed"
		fi
		read -r -e -p "$1 [$5] > " INPUT
		RETVAL=1
		if [ -z "$INPUT" ]; then
			RETVAL=2
			INPUT=$5
			if [ -z "$INPUT" -a  "$4" -eq 0 ]; then
				break
			fi	
		fi
		if [ "$INPUT" == "-" ]; then
			if [ "$4" = 0 -o "$4" = 2 ]; then
				RETVAL=3
				break
			else
#			    print_text "request_value"
				INPUT=""
			fi
		fi
	done
	return $RETVAL
}

#----------------------------------------------------------------------------

function request_callsign(){
#
# request callsign from user and validate
# 3-4 parameters: prompt format require [default]
# returns answer in global variable INPUT
# require: 0=yes/1=no
# format:
#   0=callsign,no id,not formatted to 8 digits 
#   1=callsign,no id,formatted to 8 digits
#   2=callsign with id
#   3=starnet callsign
#   4=starnet logoff callsign
#
# returns 0=error, 1=ok, 2=oldvalue, 3=reset 
#
	RETVAL=0
	unset INPUT
    
	if [ $# != 3 -a $# != 4 ]; then
		return $RETVAL
	fi
	echo " - callsign request $1 $2 $3 '$4'" >> $LOG

	while [ $RETVAL -eq 0 ]; do
		read -r -e -n 8 -p "$1 [$4] > " INPUT
		echo ""
		if [ -z "$INPUT" ]; then
			INPUT="$4"
			RETVAL=2
			if [ -z "$INPUT" -a $3 = 0 ]; then
				return $RETVAL
			fi
		fi
		if [ "$INPUT" == "-" ]; then
			if [ "$3" -eq 0 ]; then
				RETVAL=3
				break
			else
				print_text "request_input"
				unset INPUT
			fi
		fi
		INPUT=$(echo "$INPUT" | tr "[[:lower:]]" "[[:upper:]]")
		if [ "$2" -gt 2 ]; then    
			if [ ${#INPUT} -ge 6 ]; then
				pattern=$(echo "$INPUT" | sed "s!STN!!g" | tr "[[:alpha:]]" "A" | tr "[[:digit:]]" "N")
				pattern=$(printf "%-5.5s" "$pattern") 
				if [ "$pattern" = "NNN A" ]; then
					RETVAL=1
				elif [ "$2" -eq 3 -a "$pattern" = "NNN  " ]; then
					RETVAL=1
				fi
			fi    
		elif [ "$2" -eq 2 ]; then
			pattern=$(echo "$INPUT" | cut -c -8 | tr "[[:alpha:]]" "A" | tr "[[:digit:]]" "N")
			case "$pattern" in
				"ANA    A")
				RETVAL=1
				;;
				"ANAA   A")
				RETVAL=1
				;;
				"ANAAA  A")
				RETVAL=1
				;;
				"AANA   A")
				RETVAL=1
				;;
				"AANAA  A")
				RETVAL=1
				;;
				"AANAAA A")
				RETVAL=1
				;;
				"NANA   A")
				RETVAL=1
				;;
				"NANAA  A")
				RETVAL=1
				;;
				"NANAAA A")
				RETVAL=1
				;;
				"ANNA   A")
				RETVAL=1
				;;
				"ANNAA  A")
				RETVAL=1
				;;
				"ANNAAA A")
				RETVAL=1
				;;
					*)
				RETVAL=0
				;;
			esac
		else
			pattern=$(echo "$INPUT" | cut -c -7 | tr -d "[[:space:]]" | tr "[[:alpha:]]" "A" | tr "[[:digit:]]" "N" )
			case $pattern in
				"ANA")
				RETVAL=1
				;;
				"ANAA")
				RETVAL=1
				;;
				"ANAAA")
				RETVAL=1
				;;
				"AANA")
				RETVAL=1
				;;
				"AANAA")
				RETVAL=1
				;;
				"AANAAA")
				RETVAL=1
				;;
				"NANA")
				RETVAL=1
				;;
				"NANAA")
				RETVAL=1
				;;
				"NANAAA")
				RETVAL=1
				;;
				"ANNA")
				RETVAL=1
				;;
				"ANNAA")
				RETVAL=1
				;;
				"ANNAAA")
				RETVAL=1
				;;
					*)
				RETVAL=0
				;;
			esac
		fi
		if [ "$RETVAL" -eq 1 ]; then
			case $2 in
				0)
				;;
				[1-3])
				INPUT=$(printf "%-8.8s" "$INPUT")
				;;
				4)
				;;
				*)
				if [ ${#INPUT} -ne 8 ]; then
					unset INPUT
					RETVAL=0
				fi
				;;
			esac
		fi
  done
  return $RETVAL
}

#----------------------------------------------------------------------------

function request_selection(){
#
# request selection from user
# 3 parameters: prompt defaultvalue [oldvalue]
# returns 0=No, 1=Yes, 2=oldvalue, 3=error
# value in $RETVAL
#
	unset INPUT
	if [ $# != 2 -a $# != 3 ]; then
		return 3
	fi
	echo " - request_selection $1 $2 $3" >> $LOG
	read -r -e -n 1 -p "$1 [$3] > " INPUT
	if [ -z "$INPUT" ]; then
		RETVAL=$3
	else
		case $INPUT in
			[Yy1])
				RETVAL=1
				;;
			[Nn0])
				RETVAL=0
				;;
			[Rr-])
				RETVAL=$2
				;;
			*)
				RETVAL=$3
				;;
		esac    
	fi
	echo ""
	return $RETVAL
}

#----------------------------------------------------------------------------

function select_item(){
#
# 3 parameters: prompt max [oldvalue]
# returns 0=error 1=OK 2=oldvalue, 3=reset
# selection on global variable SELECT
#
	unset INPUT
	unset SELECT
	RETVAL=0
	if [ $# != 2 -a $# != 3 ]; then
		return 0
	fi
	echo " - select_item $1 $2 $3" >> $LOG
	while [ true ]; do
		read -r -e -n 2 -p "$1 [$3] > " INPUT
		if [ -z "$INPUT" ]; then
			RETVAL=2
			SELECT=$3
			break
		elif [ "$INPUT" == "-" ]; then
			RETVAL=3
			break
		elif [ $INPUT -le $2 ]; then
			RETVAL=1
			SELECT=$INPUT
			break
		fi
	done
	echo "- selected: $RETVAL/$SELECT" >> $LOG
	return $RETVAL
}

#----------------------------------------------------------------------------

function valid_ip(){
#
# return: 0=OK, 1=error
#
    local  ip=$1
    local  stat=1

    echo " - valid_ip $1" >> $LOG
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		OIFS=$IFS
		IFS='.'
		ip=($ip)
		IFS=$OIFS
		[[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
		stat=$?
    fi

    if [ $stat != 0 ]; then
		print_text "invalid_ip"
    fi
    echo " - valid_ip stat $stat" >> $LOG
    return $stat
}

#----------------------------------------------------------------------------

function valid_port(){
#
# return: 0=OK, 1=error
#
    local  port=$1
    local  stat=1

    echo " - valid_port $1" >> $LOG
    if [[ $port =~ ^[0-9]{4,5}$ ]]; then
		if [ $port -ge 1024 -a $port -lt 65535 ]; then
			stat=0
		fi 
    fi

    if [ $stat != 0 ]; then
		print_text "invalid_port"
    fi
    echo " - valid_port stat $stat" >> $LOG
    return $stat
}

#----------------------------------------------------------------------------

function reset_value(){
#
# reset_value to default
# 1 parameter: parametername
#
  RETVAL=0
    
	if [ $# != 1 ]; then
		return $RETVAL
	fi

	echo " - reset $1" >> $LOG

	read_default $1 
	if [ $? -ge 1 ]; then
		write_value $REPEATERCONFIG $1 "$DEFAULT"
		if [ $? = 1 ]; then
			echo -n "($1='$DEFAULT') "
			print_text "reset_value"
			RETVAL=1
		fi
	fi
  echo ""
  return $REVAL
}

#----------------------------------------------------------------------------

function print_text(){
#
# 1 parameter: textlabel
# returns: 0=OK, 1=ERROR
#
  RETVAL=0
    
	if [ $# != 1 ]; then
		return $RETVAL
	fi

	echo " - text $1" >> $LOG

	if [ ! -f "$MENUFILE" ]; then
		echo "FATAL ERROR!! helpfile $HELPFILE does not exists"
		echo "FATAL ERROR!! helpfile $HELPFILE does not exists" >> $LOG
		exit
	fi
	grep "^$1:" $MENUFILE | sed "s!$1:!!g"
}

#----------------------------------------------------------------------------

function set_language(){
#
#language=1
#
    var="language"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		else
#		    convert different language index from ircddbgateway
			case $VALUE in
			6)
				VALUE=9
				;;
			7)
				VALUE=6
				;;
			8)
				VALUE=7
				;;
			9-10)
				VALUE=8
				;;
			11)
				VALUE=10
				;;
			*)
				;;
			esac	
		fi
    fi
    print_text $var 
    select_item $var 11 "$VALUE"
    RET=$?
    case $RET in
	1)
	    VALUE="$SELECT"
	    ;;
	2)
#	    VALUE="$VALUE"
	    ;;
	3)
	    VALUE="$DEFAULT"
	    ;;
	*)
	    ;;
    esac

    write_value $REPEATERCONFIG $var "$VALUE"
    HELPFILE="$DATAPATH/dstarrepeater_conf.$VALUE.hlp"
    if [ ! -f "$HELPFILE" ]; then
		HELPFILE="$DATAPATH/dstarrepeater_conf.0.hlp"
    fi

    MENUFILE="$DATAPATH/dstarrepeater_conf.$VALUE.menu"
    if [ ! -f "$MENUFILE" ]; then
		MENUFILE="$DATAPATH/dstarrepeater_conf.0.menu"
    fi
}

#################### general configuration  ################################################

#################### Basic Setup / Callsign ##############################################################

function basic_setup(){

    print_text basic_setup 
    
# 				
# first choice for default values is always an exiting own configfile
# 2nd and 3rd choice - if no better available:
#
# callsign=				from ircDDBGateway
# callsign=DB0LJ  B
#
    var="callsign"
    Dat=`date +%Y%m%d%H%M`
    DEFAULT=""
    echo "$Dat: $var" >> $LOG
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG "gatewayCallsign"
		if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
		else
			repeaterCall="$VALUE"
			read_value $IRCDDBGWCONFIG "repeaterBand${MODULE}"
			if [ "$?" -eq 0 ]; then
				VALUE=""
			else
				VALUE="$(printf "%-7.7s" "$repeaterCall")${VALUE}"		
			fi
		fi
    fi
    print_text $var
    request_callsign $var 2 1 "$VALUE"
    if [ "$?" -eq 1 ]; then
		write_value $REPEATERCONFIG $var "$INPUT"
    fi
#
# gateway=				from ircDDBGateway
# gateway=DB0LJ  G
#
    var="gateway"
    Dat=`date +%Y%m%d%H%M`
    DEFAULT=""
    echo "$Dat: $var" >> $LOG
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG "gatewayCallsign"
		if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
		fi
    fi
    print_text $var 
    request_callsign $var 1 1 "$VALUE"
    if [ "$?" -eq 1 ]; then
		write_value $REPEATERCONFIG $var "$(printf "%-7.7s" "$INPUT")G"
    fi
#    
# mode=0
#
#  /0=old value
# 0/1=duplex
# 1/2=simplex
# 2/3=gateway
# 3/4=tx only
# 4/5=rx only
# 5/6=tx and rx
#
    var="mode"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    select_item $var 6 "$VALUE"
    RET=$?	
    case $RET in
		1)
			write_value $REPEATERCONFIG $var "$SELECT"
			;;
		2)
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		3)
			write_value $REPEATERCONFIG $var "$DEFAULT"
			;;
		*)
			;;
    esac
#
# ack=1
#
#  /0=old value
# 0/1=off
# 1/2=BER
# 2/3=status
#
    var="ack"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    select_item $var 3 "$VALUE"
    RET=$?
    case $RET in
		1)
			write_value $REPEATERCONFIG $var "$SELECT"
			;;
		2)
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		3)
			write_value $REPEATERCONFIG $var "$DEFAULT"
			;;
		*)
			;;
    esac
#
# restriction=0
# 0=off / 1=on
#
    var="restriction"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac

#
# rpt1Validation=1
# 0=off / 1=on
#
    var="rpt1Validation"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac
	
#
# dtmfBlanking=1
#
    var="dtmfBlanking"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
    esac
	
#
# errorReply=1
#	
    var="errorReply"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
    esac

	return 1
}

#################### Network Setup ##############################################################

function network_setup(){

    print_text network_setup 

#
# gatewayAddress=127.0.0.1		from ircDDBGateway
#
    var="gatewayAddress"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG "hbAddress"
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
    fi
    VALID=1
    while [ "$VALID" != 0 ]; do
		print_text $var 
		request_input $var 7 15 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			valid_ip $INPUT
			VALID=$?
		fi
    done
    write_value $REPEATERCONFIG $var "$INPUT"

#
# gatewayPort=20010			from ircDDBGateway
#
    var="gatewayPort"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG "hbPort"
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
    fi
    VALID=1
    while [ "$VALID" != 0 ]; do
		print_text $var 
		request_input $var 3 5 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			valid_port $INPUT
			VALID=$?
		fi
    done
    write_value $REPEATERCONFIG $var "$INPUT"

#
# localAddress=127.0.0.1		from ircDDBGateway
#
    var="localAddress"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG "repeaterAddress${MODULE}"
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
    fi
    VALID=1
    while [ "$VALID" != 0 ]; do
		print_text $var 
		request_input $var 7 15 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			valid_ip $INPUT
			VALID=$?
		fi
    done
    write_value $REPEATERCONFIG $var "$INPUT"

#
# localPort=				from ircDDBGateway
# localPort=20011
#
    var="localPort"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		read_value $IRCDDBGWCONFIG repeaterPort${MODULE}
		if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
		fi
    fi
    VALID=1
    while [ "$VALID" != 0 ]; do
		print_text "repeaterPort" 
		request_input $var 3 5 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			valid_port $INPUT
			VALID=$?
		fi
    done
    write_value $REPEATERCONFIG $var "$INPUT"

	return 1
}

#################### Timer Setup ##############################################################

function timer_setup(){

    print_text timer_setup 
#
# timeout=180
# (0-300)
#
    var="timeout"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 300 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# ackTime=500
# (100-2000ms)
#
    var="ackTime"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 100 2000 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

	return 1
}

#################### Modem Setup ##############################################################

function modem_setup(){

    print_text modem_setup 

#
# modemType=DV-RPTR V2
#
# valid parameters (2014-02-16): 
#
    var="modemType"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var
	modems=("NONE" "DVAP" "DVMEGA" "DV-RPTR V1" "DV-RPTR V2" "DV-RPTR V3" "GMSK Modem" "Sound Card" "Split")
	
    echo "$VALUE" | grep -q "DVAP" && TYPE=1
    echo "$VALUE" | grep -q "DVMEGA" && TYPE=2
    echo "$VALUE" | grep -q "DV-RPTR V1" && TYPE=3
    echo "$VALUE" | grep -q "DV-RPTR V2" && TYPE=4
    echo "$VALUE" | grep -q "DV-RPTR V3" && TYPE=5
    echo "$VALUE" | grep -q "GMSK Modem" && TYPE=6
    echo "$VALUE" | grep -q "Sound Card" && TYPE=7
    echo "$VALUE" | grep -q "Split" && TYPE=8
	
    request_value $var 1 8 1 "$TYPE"
	RET="$?" 
	case $RET in
		1)
			VALUE=${modems[$INPUT]}
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var $RET $VALUE" >> $LOG
			break
			;;
    esac

	case $VALUE in
		"DVAP")
			dvap
			write_value $REPEATERCONFIG "modemType" "DVAP"
			;;
		"DVMEGA")
			dvmega
			write_value $REPEATERCONFIG "modemType" "DVMEGA"
			;;
		"DV-RPTR V1")
			dvrptr1
			write_value $REPEATERCONFIG "modemType" "DV-RPTR V1"
			;;
		"DV-RPTR V2")
			dvrptr2
			write_value $REPEATERCONFIG "modemType" "DV-RPTR V2"
			;;
		"DV-RPTR V3")	
			dvrptr3
			write_value $REPEATERCONFIG "modemType" "DV-RPTR V3"
			;;
		"GMSK Modem")
			gmsk
			write_value $REPEATERCONFIG "modemType" "GMSK Modem"
			;;
		"Sound Card")
			soundcard
			write_value $REPEATERCONFIG "modemType" "Sound Card"
			;;
		"Split")
			split
			write_value $REPEATERCONFIG "modemType" "Split"
			;;
		*)
			echo "ERROR"
			echo "ERROR $var $RET $VALUE" >> $LOG
			break
			;;
	esac
}
	
#################### Beacon Setup ##############################################################

function beacon_setup(){

    print_text beacon_setup 

#
# beaconTime=600
# (0-1800sec)
#
    var="beaconTime"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 1800 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
#beaconText=
#
    var="beaconText"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE="$DEFAULT"
    fi
    print_text $var 
    request_input $var 1 20 0 "$VALUE"
    if [ "$?" = 3 ]; then
		INPUT="$DEFAULT"
    fi
    write_value $REPEATERCONFIG $var "$INPUT"

#
# beaconVoice=0
#
    var="beaconVoice"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac

    return
}


#################### Announcement Setup ##############################################################

function announcement_setup(){

    print_text announcement_setup 

	echo "Announcement support will be implemented soon!"

}


#################### hardware specific configuration  ################################################

############################## Sound Card ###########################################################

function soundcard(){
## soundCard

#
#soundCardRXDevice=HDA Intel: ALC662 rev1 Analog (hw:0,0)	??? maybe everything
#soundCardRXDevice=default
#
## arecord -l | grep -v "^ " | grep -v "^*"
#card 0: Intel [HDA Intel], device 0: ALC662 rev1 Analog [ALC662 rev1 Analog]
#card 1: default [USB PnP Sound Device          ], device 0: USB Audio [USB Audio]
#
# config entries:
#-> HDA Intel: ALC662 rev1 Analog (hw:0,0)
#-> default
#
    var="soundCardRXDevice"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
        read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE="$DEFAULT"
    fi
    print_text $var 

    if [ -e /usr/bin/arecord ]; then
		array1=$(arecord -l | grep "card" | cut -d "[" -f 2 | cut -d "]" -f 1 | tr '\n' ';')
		array2=$(arecord -l | grep "card" | cut -d "[" -f 3 | cut -d "]" -f 1 | tr '\n' ';')
		array3=$(arecord -l | grep "card" | cut -d ":" -f 1 | cut -d " " -f 2 | tr '\n' ';')
		array4=$(arecord -l | grep "card" | cut -d "," -f 2 | cut -d ":" -f 1 | cut -d " " -f 3 | tr '\n' ';')

		RET=0
		i=1
		while [ $RET -eq 0 ]; do
			str1=$(echo "$array1" | cut -d ";" -f $i)
			str2=$(echo "$array2" | cut -d ";" -f $i)
			str3=$(echo "$array3" | cut -d ";" -f $i)
			str4=$(echo "$array4" | cut -d ";" -f $i)
			if [ -z "$str1" ]; then
			RET=1
			else
			echo "$i:  \"$str1: $str2 (hw:$str3,$str4)\""
			let i=$i+1
			fi
		done
    else
		print_text "alsa_req"
		echo "   without alsa" >> $LOG
    fi
    echo "$i:  \"default\""
    echo " "

    request_value $var 1 "$i" 2 ""
    RET="$?"
    case $RET in
		1)
			if [ "$i" -eq "$INPUT" ]; then
			echo "OK (\"default\")"
			INPUT="default"
			else
			str1=$(echo "$array1" | cut -d ";" -f $INPUT)
			str2=$(echo "$array2" | cut -d ";" -f $INPUT)
			str3=$(echo "$array3" | cut -d ";" -f $INPUT)
			str4=$(echo "$array4" | cut -d ";" -f $INPUT)
			VALUE=$(echo "$str1: $str2 (hw:$str3,$str4)")
			fi
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE="default"
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
#soundCardTXDevice=HDA Intel: ALC662 rev1 Analog (hw:0,0)
#soundCardTXDevice=default
#
##aplay -l | grep -v "^ " | grep -v "^*"
#card 0: Intel [HDA Intel], device 0: ALC662 rev1 Analog [ALC662 rev1 Analog]
#card 0: Intel [HDA Intel], device 1: ALC662 rev1 Digital [ALC662 rev1 Digital]
#card 1: default [USB PnP Sound Device          ], device 0: USB Audio [USB Audio]
#
# config entries:
#->"HDA Intel: ALC662 rev1 Analog (hw:0,0)
#->"HDA Intel: ALC662 rev1 Digital (hw:0,1)
#-> default
#
    var="soundCardTXDevice"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE="$DEFAULT"
    fi

    print_text $var 

    if [ -e /usr/bin/aplay ]; then
		array1=$(aplay -l | grep "card" | cut -d "[" -f 2 | cut -d "]" -f 1 | tr '\n' ';')
		array2=$(aplay -l | grep "card" | cut -d "[" -f 3 | cut -d "]" -f 1 | tr '\n' ';')
		array3=$(aplay -l | grep "card" | cut -d ":" -f 1 | cut -d " " -f 2 | tr '\n' ';')
		array4=$(aplay -l | grep "card" | cut -d "," -f 2 | cut -d ":" -f 1 | cut -d " " -f 3 | tr '\n' ';')

		RET=0
		i=1
		while [ $RET -eq 0 ]; do
			str1=$(echo "$array1" | cut -d ";" -f $i)
			str2=$(echo "$array2" | cut -d ";" -f $i)
			str3=$(echo "$array3" | cut -d ";" -f $i)
			str4=$(echo "$array4" | cut -d ";" -f $i)
			if [ -z "$str1" ]; then
			RET=1
			else
			echo "$i:  \"$str1: $str2 (hw:$str3,$str4)\""
			let i=$i+1
			fi
		done
    else
		print_text "alsa_req"
		echo "   without alsa" >> $LOG
    fi
    echo "$i:  \"default\""
    echo " "

    request_value $var 1 "$i" 2 ""
    RET="$?"
    case $RET in
		1)
			if [ "$i" -eq "$INPUT" ]; then
			echo "OK (\"default\")"
			INPUT="default"
			else
			str1=$(echo "$array1" | cut -d ";" -f $INPUT)
			str2=$(echo "$array2" | cut -d ";" -f $INPUT)
			str3=$(echo "$array3" | cut -d ";" -f $INPUT)
			str4=$(echo "$array4" | cut -d ";" -f $INPUT)
			VALUE=$(echo "$str1: $str2 (hw:$str3,$str4)")
			fi
			;;
		2)
	#	    VALUE=$VALUE	
			;;
		3)
			VALUE="default"
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# soundCardRXLevel=0.9000
# 0-100% (0.0000-1.0000)
#
    var="soundCardRXLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    VALUE=`echo "scale=0; 100*$VALUE" | bc`
    print_text $var
    request_value $var 0 100 2 $(echo "($VALUE+0.5)/1" | bc)
    RET="$?"
    case $RET in
		1)
			VALUE=`echo "scale=3; $INPUT/100" | bc`
			;;
		2)
			VALUE=`echo "scale=3; $VALUE/100" | bc`
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR $RET"
			echo "ERROR $RET $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var $(printf "%8.4f" "$VALUE")


#
# soundCardTXLevel=0.8500
# 0-100% (0.0000-1.0000)
#
    var="soundCardTXLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    VALUE=`echo "scale=0; 100*$VALUE" | bc`
    print_text $var 
    request_value $var 0 100 2 $(echo "($VALUE+0.5)/1" | bc)
    RET="$?"
    case $RET in
		1)
			VALUE=`echo "scale=3; $INPUT/100" | bc`
			;;
		2)
			VALUE=`echo "scale=3; $VALUE/100" | bc`
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR $RET"
			echo "ERROR $RET $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var $(printf "%8.4f" "$VALUE")

#
# squelchMode=2
# 0: normal
# 1: inverted
# 2: open
#

#
# soundCardSquelchLevel=0.4000
# 0-100% (0.0000-1.0000)
#
    var="soundCardSquelchLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    VALUE=`echo "scale=3; 100*$VALUE" | bc`
    print_text $var 
    request_value $var 0 100 2 $(echo "($VALUE+0.5)/1" | bc)
    RET="$?"
    case $RET in
		1)
			VALUE=`echo "scale=3; $INPUT/100" | bc`
			;;
		2)
			VALUE=`echo "scale=3; $VALUE/100" | bc`
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR $RET"
			echo "ERROR $RET $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var $(printf "%8.4f" "$VALUE")

#
# soundCardRXInvert=1
#
    var="soundCardRXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac

#
# soundCardTXInvert=0
#
    var="soundCardTXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac

#
# soundCardHangTime
# (0-3000ms)
#
    var="soundCardHangTime"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 3000 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
	ct=1
}
##################################### DV-RPTR V1 ###############################################################

function dvrptr1(){
# DVRPTR V1
#
# dvrptr1Port=/dev/ttyACM0
# 0:/dev/ttyACM0 ... 9:/dev/ttyACM9
#
	var="dvrptr1Port"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
    	read_default $var
	DEFAULT=$(echo "$DEFAULT" | sed "s!/dev/ttyACM!!g")
    	read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
    	    VALUE="$DEFAULT"
	fi
    	VALUE=$(echo "$VALUE" | sed "s!/dev/ttyACM!!g")
	print_text $var 
   	ls /dev/ttyACM*
	request_value $var 0 9 1 "$VALUE"
   	RET="$?"
	case $RET in
	    1)
			VALUE=$INPUT
			;;
	    2)
#	   	   VALUE=$VALUE	
			;;
	    3)
			VALUE=$DEFAULT
			;;
	    *)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
	esac
	write_value $REPEATERCONFIG $var "/dev/ttyACM${VALUE}"

	
#
# dvrptr1Delay=0
# -500ms ... NONE ... +500ms in steps of 20ms
# (-25 ... +25)

	
#
# dvrptr1RXInvert=0
# (0-1)
#
    var="dvrptr1RXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
		esac

#
# dvrptr1TXInvert=1
# (0-1)
#
    var="dvrptr1TXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
    esac

#
# dvrptr1Channel=0
# (0-1)
#
    var="dvrptr1Channel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
    	    write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
    	    reset_value $var
			;;
    esac

#
# dvrptr1ModLevel=15
# (1-100%)
#
    var="dvrptr1ModLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 100 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvrptr1TXDelay=100
# (0-500ms)
#
    var="dvrptr1TXDelay"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 500 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    return
}

##################################### DV-RPTR V2 ###############################################################

function dvrptr2(){
# DVRPTR V2
#
# configure network or USB
# dvrptr2Connection=0
# 0 = USB
# 1 = Network
#
	var="dvrptr2Connection"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
	read_default $var
        read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
	    VALUE=$DEFAULT
    fi
	print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
	INPUT=$?
	case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			dvrptr2Connection=$INPUT
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			dvrptr2Connection=$VALUE
			;;
		*)
			reset_value $var
			dvrptr2Connection=$DEFAULT
			;;
	esac

    if [ $dvrptr2Connection = 0 ]; then
#
# dvrptr2USBPort=/dev/ttyACM0
# 0:/dev/ttyACM0 ... 9:/dev/ttyACM9
#
		var="dvrptr2USBPort"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default $var
		DEFAULT=$(echo "$DEFAULT" | sed "s!/dev/ttyACM!!g")
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE="$DEFAULT"
		fi
		VALUE=$(echo "$VALUE" | sed "s!/dev/ttyACM!!g")
		print_text $var 
		ls /dev/ttyACM*
		request_value $var 0 9 1 "$VALUE"
		RET="$?"
		case $RET in
			1)
				VALUE=$INPUT
				;;
			2)
#	    	   VALUE=$VALUE	
				;;
			3)
				VALUE=$DEFAULT
				;;
			*)
				echo "ERROR"
				echo "ERROR $var" >> $LOG
				break
			;;
		esac
		write_value $REPEATERCONFIG $var "/dev/ttyACM${VALUE}"
    else
#
# dvrptr2Address=192.168.42.241
#
		var="dvrptr2Address"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default "modemIPAddress"
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
		VALID=1
		while [ "$VALID" != 0 ]; do
			print_text "modemIPAddress" 
			request_input $var 7 15 2 "$VALUE"
			if [ "$?" = 3 ]; then
				VALID=0
				INPUT=$DEFAULT
			else
				valid_ip $INPUT
				VALID=$?
			fi
		done
		write_value $REPEATERCONFIG $var "$INPUT"

#
# dvrptr2Port=23
#
		var="dvrptr2Port"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default $var
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
		VALID=1
		while [ "$VALID" != 0 ]; do
			print_text $var 
			request_input $var 2 5 2 "$VALUE"
			if [ "$?" = 3 ]; then
				VALID=0
				INPUT=$DEFAULT
			else
				if [ $INPUT -lt 65535 ]; then
					VALID=0
				fi
			fi
		done
		write_value $REPEATERCONFIG $var "$INPUT"
    fi

#
# dvrptr2TXInvert=1
# (0-1)
#
    var="dvrptr2TXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac


#
# dvrptr2ModLevel=15
# (1-100%)
#
    var="dvrptr2ModLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 100 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvrptr2TXDelay=100
# (0-500ms)
#
    var="dvrptr2TXDelay"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 500 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    return
}

##################################### DV-RPTR V3 ###############################################################

function dvrptr3(){
# DVRPTR V3
#
# configure network or USB
# dvrptr2Connection=0
# 0 = USB
# 1 = Network
#
	var="dvrptr3Connection"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
	read_default $var
        read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
	    VALUE=$DEFAULT
    fi
	print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
	INPUT=$?
	case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			dvrptr3Connection=$INPUT
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			dvrptr3Connection=$VALUE
			;;
		*)
			reset_value $var
			dvrptr3Connection=$DEFAULT
			;;
	esac

    if [ $dvrptr3Connection = 0 ]; then
#
# dvrptr3USBPort=/dev/ttyACM0
# 0:/dev/ttyACM0 ... 9:/dev/ttyACM9
#
		var="dvrptr3USBPort"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default $var
		DEFAULT=$(echo "$DEFAULT" | sed "s!/dev/ttyACM!!g")
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE="$DEFAULT"
		fi
		VALUE=$(echo "$VALUE" | sed "s!/dev/ttyACM!!g")
		print_text $var 
		ls /dev/ttyACM*
		request_value $var 0 9 1 "$VALUE"
		RET="$?"
		case $RET in
			1)
				VALUE=$INPUT
				;;
			2)
#	    	   VALUE=$VALUE	
				;;
			3)
				VALUE=$DEFAULT
				;;
			*)
				echo "ERROR"
				echo "ERROR $var" >> $LOG
				break
			;;
		esac
		write_value $REPEATERCONFIG $var "/dev/ttyACM${VALUE}"
    else
#
# dvrptr3Address=192.168.42.241
#
		var="dvrptr3Address"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default "modemIPAddress"
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
		VALID=1
		while [ "$VALID" != 0 ]; do
			print_text "modemIPAddress" 
			request_input $var 7 15 2 "$VALUE"
			if [ "$?" = 3 ]; then
				VALID=0
				INPUT=$DEFAULT
			else
				valid_ip $INPUT
				VALID=$?
			fi
		done
		write_value $REPEATERCONFIG $var "$INPUT"

#
# dvrptr3Port=23
#
		var="dvrptr3Port"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default $var
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
				VALUE=$DEFAULT
		fi
		VALID=1
		while [ "$VALID" != 0 ]; do
			print_text $var 
			request_input $var 2 5 2 "$VALUE"
			if [ "$?" = 3 ]; then
				VALID=0
				INPUT=$DEFAULT
			else
				if [ $INPUT -lt 65535 ]; then
					VALID=0
				fi
			fi
		done
		write_value $REPEATERCONFIG $var "$INPUT"
    fi

#
# dvrptr3TXInvert=1
# (0-1)
#
    var="dvrptr3TXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
				write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
				reset_value $var
			;;
    esac


#
# dvrptr3ModLevel=15
# (1-100%)
#
    var="dvrptr3ModLevel"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 100 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvrptr3TXDelay=100
# (0-500ms)
#
    var="dvrptr3TXDelay"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 500 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    return
}

####################################### GMSK #############################################################

function gmsk(){
## GMSK

#
# gmskAddress=768
# (300h ... 31Fh = 768 - 799)
#
    var="gmskAddress"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 768 799 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    echo "SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04d8\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-gmskmodem.rules
    /etc/init.d/udev reload
	ct=1

    return
}

##################################### DVAP ###############################################################

function dvap(){
## DVAP

#
# dvapPort=/dev/ttyUSB0
# 1:/dev/ttyUSB0
# 2:/dev/ttyUSB1
# 3:/dev/ttyUSB2
# 4:/dev/ttyUSB3
# 5:/dev/ttyUSB4
#
    var="dvapPort"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    DEFAULT=$(echo "$DEFAULT" | sed "s!/dev/ttyUSB!!g")
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE="$DEFAULT"
    fi
    VALUE=$(echo "$VALUE" | sed "s!/dev/ttyUSB!!g")
    print_text $var 
    ls /dev/ttyUSB*
    request_value $var 0 4 1 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "/dev/ttyUSB${VALUE}"
    echo "KERNEL==\"ttyUSB${VALUE}\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-ttyUSB${VALUE}.rules
    /etc/init.d/udev reload
    [ -c /dev/ttyUSB${VALUE} ] && chown opendv:opendv /dev/ttyUSB${VALUE}

#
# dvapFrequency=145500000
# 2m:   144000000-148000000Hz
# 70cm: 420000000-450000000Hz
#
    var="dvapFrequency"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 144000000 450000000 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvapPower=10
# (-12dBm ... +10dBm)
#
    var="dvapPower"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var "-12" 10 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvapSquelch=-100
# (-128dBm ... -45dBm)
#
    var="dvapSquelch"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var "-128" "-45" 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# dvapOffset=0
# (-2000Hz ... +2000Hz)
#
    var="dvapOffset"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var "-2000" 2000 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
				VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    return
}

##################################### DVMEGA ###############################################################

function dvmega(){
# DVMEGA

#dvmegaPort=/dev/ttyACM0
	var="dvmegaPort"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
    read_default $var
	DEFAULT=$(echo "$DEFAULT" | sed "s!/dev/ttyACM!!g")
    read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
    	    VALUE="$DEFAULT"
	fi

    VALID=1
    while [ "$VALID" != 0 ]; do
		print_text $var 
		ls /dev/ttyACM* 2> /dev/null
		ls /dev/ttyUSB* 2> /dev/null
		ls /dev/ttyAMA0 2> /dev/null
		request_input $var 10 13 2 "$VALUE"
		case "$?" in
			1)
				ls /dev/tty* | grep "$VALUE" && VALUE=$INPUT
				ls /dev/tty* | grep "$VALUE" && VALID=0
				;;
			2)	
#				VALUE=$VALUE
				VALID=0
				;;
			3)
				VALUE=$DEFAULT
				VALID=0
				;;
			*)
				VALID=1
				;;
		esac
    done
    write_value $REPEATERCONFIG $var "$VALUE"

#
#dvmegaRXInvert=0
# (0-1)
#
    var="dvmegaRXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
		esac

#
#dvmegaTXInvert=0
# (0-1)
#
    var="dvmegaTXInvert"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
    esac

#
#dvmegaVariant=0
# (Node/Radio)
#
    var="dvmegaVariant"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
	request_value $var 0 1 2 "$VALUE"
   	RET="$?"
	case $RET in
	    1)
			VALUE=$INPUT
			;;
	    2)
#	   	    VALUE=$VALUE	
			;;
	    3)
			VALUE=$DEFAULT
			;;
	    *)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
	esac
    write_value $REPEATERCONFIG $var "$VALUE"

    if [ "$VALUE" = 1 ]; then
#		dvmegaFrequency=145500000
# 		2m:   144000000-148000000Hz
# 		70cm: 420000000-450000000Hz
#
		var="dvmegaFrequency"
		Dat=`date +%Y%m%d%H%M`
		echo "$Dat: $var" >> $LOG
		read_default $var
		read_value $REPEATERCONFIG $var
		if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
		fi
		print_text $var 
		request_value $var 144000000 450000000 2 "$VALUE"
		RET="$?"
		case $RET in
			1)
				VALUE=$INPUT
				;;
			2)
#				VALUE=$VALUE	
				;;
			3)
				VALUE=$DEFAULT
				;;
			*)
				echo "ERROR"
				echo "ERROR $var" >> $LOG
				break
				;;
		esac
		write_value $REPEATERCONFIG $var "$VALUE"
    fi

	
#
#dvmegaTXDelay=150
# (0-500ms)
#
    var="dvmegaTXDelay"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 350 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"
    return

}

##################################### SPLIT ###############################################################

function split(){

	while [ "$RET" != 0 ]; do
		var="split"
		print_text $var 
		request_value $var 0 8 1
		RET="$?"
		case $RET in
			1)
				VALUE=$INPUT
				;;
			2)
	#		    VALUE=$VALUE	
				;;
			3)
				VALUE=$DEFAULT
				;;
			*)
				echo "ERROR"
				echo "ERROR $var" >> $LOG
				break
				;;
		esac
		case $VALUE in
			0)
				return 0
				;;
			1)
				set_split "splitLocal"
				;;
			2)
				set_split "splitTX1"
				;;
			3)
				set_split "splitRX1"
				;;
			4)
				set_split "splitTX2"
				;;
			5)
				set_split "splitRX2"
				;;
			6)
				set_split "splitTX3"
				;;
			7)
				set_split "splitRX3"
				;;
			8)
				var="splitTimeout"
				Dat=`date +%Y%m%d%H%M`
				echo "$Dat: $var" >> $LOG
				read_default $var
				read_value $REPEATERCONFIG $var
				if [ "$?" = 0 ]; then
					VALUE=$DEFAULT
				fi
				print_text $var 
				request_value $var 0 300 2 "$VALUE"
				RET="$?"
				case $RET in
					1)
						VALUE=$INPUT
						;;
					2)
			#		    VALUE=$VALUE	
						;;
					3)
						VALUE=$DEFAULT
						;;
					*)
						echo "ERROR"
						echo "ERROR $var" >> $LOG
						break
						;;
				esac
				write_value $REPEATERCONFIG $var "$VALUE"					
				;;
			*)
				RET=1
				;;
		esac
	done
}	

function set_split(){	
#
# 1 parameter: split_parameter_basename
# (splitLocal / splitTX1 / splitRX1 / splitTX2 / splitRX2 / splitTX3 / splitRX3)
# returns 0=error 1=OK
#
	unset INPUT
	RETVAL=0
	if [ $# != 1 ]; then
		return 0
	fi
	echo " - set_split $1" >> $LOG

#
#splitLocalAddress=
#splitTX1Address=
#splitTX2Address=
#splitTX3Address=
#splitRX1Address=
#splitRX2Address=
#splitRX3Address=
#
    var="$1Address"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
	read_default $var
	read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
	fi
	VALID=1
	while [ "$VALID" != 0 ]; do
		print_text $var
		request_input $var 7 15 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			valid_ip $INPUT
			VALID=$?
		fi
	done
	write_value $REPEATERCONFIG $var "$INPUT"

#	
#splitLocalPort=0
#splitTX1Port=0
#splitTX2Port=0
#splitTX3Port=0
#splitRX1Port=0
#splitRX2Port=0
#splitRX3Port=0
#
	var="$1Port"
	Dat=`date +%Y%m%d%H%M`
	echo "$Dat: $var" >> $LOG
	read_default $var
	read_value $REPEATERCONFIG $var
	if [ "$?" = 0 ]; then
			VALUE=$DEFAULT
	fi
	VALID=1
	while [ "$VALID" != 0 ]; do
		print_text $var 
		request_input $var 2 5 2 "$VALUE"
		if [ "$?" = 3 ]; then
			VALID=0
			INPUT=$DEFAULT
		else
			if [ $INPUT -lt 65535 ]; then
				VALID=0
			fi
		fi
	done
	write_value $REPEATERCONFIG $var "$INPUT"

	return RETVAL=1
}

###################################### Controller #########################################################

function controller_setup(){
#
# controllerType=Velleman K8055 - 1
# 1: Velleman K8055 - 1 ... Velleman K8055 - 3
# 2: URI USB - 1 ...  URI USB - 6
# 3: Serial - /dev/ttyS0 ... Serial - /dev/ttyS4
# 4: /dev/ttyUSB0 ... /dev/ttyUSB4
#
    var="controllerType"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE="3"
    fi
    echo "$VALUE" | grep -q "Velleman" && TYPE=1
    echo "$VALUE" | grep -q "URI USB" && TYPE=2
    echo "$VALUE" | grep -q "/dev/ttyS" && TYPE=3
    echo "$VALUE" | grep -q "/dev/ttyUSB" && TYPE=4
    
    print_text $var 
    select_item $var 4 "$TYPE"
    RET=$?
    case $RET in
		1)
			TYPE="$SELECT"
			;;
		2)
#		    TYPE="$TYPE"
			;;
		3)
			TYPE="3"
			;;
		*)
			;;
    esac

    case $TYPE in
		1)
			print_text "iface_vel"
			VALUE=$(echo "$VALUE" | sed "s!Velleman K8055 - !!g")
			select_item $var 3 "$VALUE"
			RET=$?
			case $RET in
				1)
					VALUE="$SELECT"
					;;
				2)
	#			    VALUE="$VALUE"
					;;
				3)
					VALUE=1
					;;
				*)
					;;
			esac
			write_value $REPEATERCONFIG $var "Velleman K8055 - ${VALUE}"
			echo "SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"10cf\", ATTRS{idProduct}==\"5500\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-k8055.rules
			/etc/init.d/udev reload
			;;
		2)
			print_text "iface_uri"
			VALUE=$(echo "$VALUE" | sed "s!URI USB - !!g")
			select_item $var 6 "$VALUE"
			RET=$?
				case $RET in
				1)
					VALUE="$SELECT"
					;;
				2)
#				    VALUE="$VALUE"
					;;
				3)
					VALUE=1
					;;
				*)
					;;
			esac
			write_value $REPEATERCONFIG $var "URI USB - ${VALUE}"
			echo "SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0d8c\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-uri.rules
			/etc/init.d/udev reload
			;;
		3)
			print_text "iface_ser"
			ls /dev/ttyS*
			VALUE=$(echo "$VALUE" | sed "s!/dev/ttyS!!g")
			select_item $var 4 "$VALUE"
			RET=$?
			case $RET in
				1)
					VALUE="$SELECT"
					;;
				2)
#				    VALUE="$VALUE"
					;;
				3)
					VALUE=1
					;;
				*)
					;;
			esac
			write_value $REPEATERCONFIG $var "/dev/ttyS${VALUE}"
			echo "KERNEL==\"tty${VALUE}\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-tty${VALUE}.rules
			/etc/init.d/udev reload
			[ -c /dev/tty${VALUE} ] && chown opendv:opendv /dev/tty${VALUE}
			;;
		4)
			print_text "iface_usb"
			ls /dev/ttyUSB*
			VALUE=$(echo "$VALUE" | sed "s!/dev/ttyUSB!!g")
			select_item $var 4 "$VALUE"
			RET=$?
			case $RET in
				1)
					VALUE="$SELECT"
					;;
				2)
#				    VALUE="$VALUE"
					;;
				3)
					VALUE=1
					;;
				*)
					;;
			esac
			write_value $REPEATERCONFIG $var "/dev/ttyUSB${VALUE}"
			echo "KERNEL==\"ttyUSB${VALUE}\", OWNER=\"opendv\", GROUP=\"opendv\", MODE=\"664\"" > /etc/udev/rules.d/92-ttyUSB${VALUE}.rules
			/etc/init.d/udev reload
			[ -c /dev/ttyUSB${VALUE} ] && chown opendv:opendv /dev/ttyUSB${VALUE}
			;;
		*)
			write_value $REPEATERCONFIG $var "$DEFAULT"
			;;
    esac
#
# serialConfig=1
# (1-3)
#
    var="serialConfig"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 1 3 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

#
# activeHangTime=9
# 0-300ms

    var="activeHangTime"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
    	VALUE=$DEFAULT
    fi
    print_text $var 
    request_value $var 0 300 2 "$VALUE"
    RET="$?"
    case $RET in
		1)
			VALUE=$INPUT
			;;
		2)
#		    VALUE=$VALUE	
			;;
		3)
			VALUE=$DEFAULT
			;;
		*)
			echo "ERROR"
			echo "ERROR $var" >> $LOG
			break
			;;
    esac
    write_value $REPEATERCONFIG $var "$VALUE"

    return 1
}

#############################################################################################
################################## Overview #################################################

function overview(){
    cat $REPEATERCONFIG | more
    read $tmp -p "<ENTER>"
    return 1
}

function modulesetup(){
    print_text "module_setup"

    var="sel_module"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
	unset VALUE
    fi
    MODULE=0
    while [ "$MODULE" -eq "0" ]; do
		print_text $var 
		select_item $var 4 "$VALUE"
		RET=$?
		
		case $RET in
			1)
				MODULE=$SELECT
				;;
			2)
				MODULE=$VALUE
				;;
			3)
				MODULE=0
				;;
			*)
				;;
		esac
    done
    echo "OK ($MODULE)"
    echo " "
    return $RET
}


function logging(){

#
# command line options for logging / logdir / audiodir
#
    var="nolog"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG

    DAEMON_ARGS=$(grep "^DAEMON_ARGS" /etc/default/dstarrepeater_$MODULE)
    print_text $var 

    options=( ${DAEMON_ARGS//-/ } )
    i=0
    NOLOG=0
    while [ ! -z "${options[$i]}" ]; do
		case "${options[$i]}" in
			logdir)
				let i+=1
				LOGDIR=${options[$i]}
				;;
			audiodir)
				let i+=1
				AUDIODIR=${options[$i]}
				;;
			nolog)
				NOLOG=1
				;;
			daemon)
				;;
			*)
				;;
		esac
		let i+=1
    done

    NEW_ARGS="-daemon"
    request_selection $var "1" "$NOLOG"
    if [ "$?" != 0 ]; then
    	NEW_ARGS="$NEW_ARGS -nolog"
    fi

    var="logdir"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    print_text $var
    echo $LOGDIR
    request_input $var 3 80 2 "$LOGDIR"
    if [ "$?" = 3 ]; then
        INPUT="/var/log/opendv"
    fi
    if [ ! -z "$INPUT" ]; then
		NEW_ARGS="$NEW_ARGS -logdir $INPUT"
    fi

    var="audiodir"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    print_text $var
    echo $AUDIODIR
    request_input $var 3 80 0 "$AUDIODIR"
    if [ ! -z "$INPUT" ]; then
		NEW_ARGS="$NEW_ARGS -audiodir $INPUT"
    fi

    NEW_ARGS="DAEMON_ARGS=\"$NEW_ARGS $MODULE\""
    echo "OK!"
    print_text "cmd_options"
    echo "$DAEMON_ARGS -> $NEW_ARGS"
    sed -i "s|$DAEMON_ARGS|$NEW_ARGS|g" /etc/default/dstarrepeater_$MODULE

#
# audio logging
#logging=0
#
    var="logging"
    Dat=`date +%Y%m%d%H%M`
    echo "$Dat: $var" >> $LOG
    read_default $var
    read_value $REPEATERCONFIG $var
    if [ "$?" = 0 ]; then
		VALUE=$DEFAULT
    fi
    print_text $var 
    request_selection $var "$DEFAULT" "$VALUE"
    INPUT=$?
    case $INPUT in
		[0-1])
			write_value $REPEATERCONFIG $var "$INPUT"
			;;
		2)   
			write_value $REPEATERCONFIG $var "$VALUE"
			;;
		*)
			reset_value $var
			;;
    esac

}

setup_main(){
    INP=0
    while [ "$INP" -ne 99 ]; do
		ct=0
		echo ""
		echo "dstarrepeater_conf $rev" 
		echo "(C) 2014 Hans-J. Barthen, DL5DI (dl5di@gmx.de)"
		echo ""
		echo "Repeater: ${MODULE}"
		print_text "mainmenu" 
		select_item "(0-99)" 99 0
		if [ $? -ne 1 ]; then
			continue
		fi
		Dat=`date +%Y%m%d%H%M`
	#
		case "$SELECT" in
			1) set_language
				;;
			2)
				basic_setup
				network_setup
				timer_setup
				announcement_setup
				beacon_setup
				modem_setup
				if [ $ct = 1 ]; then
					controller_setup
				else
					reset_value "controllerType"
				fi
				print_text "final"
				;;
			3)
				basic_setup
				;;
			4)
				network_setup
				;;
			5)
				timer_setup
				;;
			6)
				announcement_setup
				;;
			7)
				beacon_setup
				;;
			8)
				modem_setup
				;;
			9)
				controller_setup
				;;
			10)
				logging
				;;
			11)
				overview
				;;
			20)
				if [ -f /etc/init.d/dstarrepeater_$MODULE ]; then
					print_text "scr_act"
					/usr/sbin/update-rc.d dstarrepeater_$MODULE defaults
				else
					print_text "scr_err" 
				fi
				echo "$Dat scr_act" >> $LOG
				;;
			21)
				if [ -f /etc/init.d/dstarrepeater_$MODULE ]; then
					print_text "scr_deact" 
					/usr/sbin/update-rc.d -f dstarrepeater_$MODULE remove
				else
					print_text "scr_err" 
				fi
				echo "$Dat scr_deact" >> $LOG
				;;
			30)
				if [ -f /etc/init.d/dstarrepeater_$MODULE ]; then
					print_text "scr_start" 
					/etc/init.d/dstarrepeater_$MODULE start
				else
					echo ""
					echo "ERROR: no startup script found"
					echo ""
				fi
				echo "$Dat scr_start" >> $LOG
				;;
			31)
				if [ -f /etc/init.d/dstarrepeater_$MODULE ]; then
					print_text "scr_stop" 
					/etc/init.d/dstarrepeater_$MODULE stop
				else
					print_text "scr_err" 
				fi
				echo "$Dat scr_stop" >> $LOG
				;;
			32)
				if [ -f /etc/init.d/dstarrepeater_$MODULE ]; then
					print_text "scr_restart" 
					/etc/init.d/dstarrepeater_$MODULE restart
				else
					print_text "scr_err" 
				fi
				echo "$Dat scr_restart" >> $LOG
				;;
			80)
				cp -p $REPEATERCONFIG $REPEATERCONFIG.$Dat
				echo ""
				echo "Backup: $REPEATERCONFIG.$Dat"
				echo "$Dat backup" >> $LOG
				;;
			81) 
				yum update repeater
				;;	    
			90)
				echo ""
				cat $HELPFILE
				read dummy
				echo "$Dat help" >> $LOG
				;;
			91)
				echo ""
				print_text "copyright"
				read dummy
				echo "$Dat copyright" >> $LOG
				;;
			99)
				print_text "bye" 
				echo "$Dat ----- bye - exit programm -----" >> $LOG
				return 1
				;;
			*)
				;;	
		esac
    done

    return 0

}

readconfig(){
    CONFIGFILE="/home/opendv/dstarrepeater/dstarrepeater_conf"

    if [ -f $CONFIGFILE ]; then
		read_value $CONFIGFILE "LOGPATH"
		Dat=`date +%Y%m%d%H%M`
		LOG=$VALUE/dstarrepeater_conf-$Dat.log
		echo "----- $Dat Program start ($rev)------" >> $LOG
		if [ ! -d "$VALUE" ]; then
			mkdir -p "$VALUE"
			echo "Created log directory $VALUE"
			echo "Created log directory $VALUE >> $LOG"
		fi
		echo "logging to $LOG"

		read_value $CONFIGFILE "CFGPATH"
		CFGPATH=$VALUE
#		echo "Config-Path: $CFGPATH"

		read_value $CONFIGFILE "DEFVALUES"
		DEFVALUES=$VALUE
#		echo "Defaultvalues: $DEFVALUES"

		read_value $CONFIGFILE "DATAPATH"
		DATAPATH=$VALUE
#		echo "Data-Path: $DATAPATH"
	else
		echo "FATAL ERROR!! Configfile $CONFIGFILE not found"
		echo "FATAL ERROR!! Configfile $CONFIGFILE not found" >> $LOG
		echo " "
		exit
    fi
    return
}

#################### MAIN ##########################

export LC_NUMERIC="en_US.UTF-8" > /dev/null
Dat=`date +%Y%m%d%H%M`
#Delimiter = $(locale -k LC_NUMERIC | grep decimal_point | sed 's/[^\.,]//g') 

echo ""
echo "dstarrepeater_conf $rev" 
echo "(C)Hans-J. Barthen, dl5di 2014"
echo ""

LOG=/dev/null

MODULE=0
AUTO=1

filename=$0

if [ $# -gt 1 ]; then
    MODULE=$1
    if [ $2 -ne "AUTO" ]; then
		AUTO=0
    fi
elif [ $# -eq 1 ]; then
    MODULE=$1
    AUTO=0
fi

if [ $MODULE -gt 4 ]; then
    MODULE=0
fi

readconfig

LANG=0
RET=0

if [ "$MODULE" = 0 ]; then
    echo "No module set"
	MENUFILE="$DATAPATH/dstarrepeater_conf.0.menu"
    HELPFILE="$DATAPATH/dstarrepeater_conf.0.hlp"
    modulesetup
    AUTO=0
fi

REPEATERCONFIG=${CFGPATH}/dstarrepeater_${MODULE}
echo "Config-File: $REPEATERCONFIG"

if [ ! -f $REPEATERCONFIG ]; then
	while read defline
	do
		output=$(echo $defline | cut -d "=" -f1)
			echo "${output}=" >> $REPEATERCONFIG
	done < $DEFVALUES
	echo "New template $REPEATERCONFIG created" >> $LOG
fi

read_value $REPEATERCONFIG "language"
RET=$?

if [ "$RET" = 0 ]; then
    IRCDDBCONFIG="/home/opendv/ircddbgateway/ircddbgw_conf"
	if [ -f $IRCDDBCONFIG ]; then
		read_value $IRCDDBCONFIG "IRCDDBGWCONFIG"
		if [ "$?" = 0 ]; then
			LANG=0
		else
			IRCDDBGWCONFIG=$VALUE
			read_value $IRCDDBGWCONFIG "language"
			if [ "$?" = 0 ]; then
				LANG=0
			else
				LANG=$VALUE
			fi
		fi
	fi
else
    LANG=$VALUE
fi

HELPFILE="$DATAPATH/dstarrepeater_conf.$LANG.hlp"
if [ ! -f "$HELPFILE" ]; then
    HELPFILE="$DATAPATH/dstarrepeater_conf.0.hlp"
#   echo "H-File: $HELPFILE"
fi

MENUFILE="$DATAPATH/dstarrepeater_conf.$LANG.menu"
if [ ! -f "$MENUFILE" ]; then
    MENUFILE="$DATAPATH/dstarrepeater_conf.0.menu"
#   echo "M-File: $MENUFILE"
fi

if [ $AUTO -eq 0 ]; then
    print_text "header"
    setup_main
else
    basic_setup
fi

exit
